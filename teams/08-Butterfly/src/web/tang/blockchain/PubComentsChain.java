package com.tang.blockchain;

import net.openmob.mobileimsdk.server.protocal.ProtocalType;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class PubComentsChain extends Contract {
    private static final String BINARY = "0x6080604052606460065560046009556002600a556004600b556101f4600c553480156200002b57600080fd5b5060405162002efc38038062002efc8339818101604052810190620000519190620000af565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000129565b600081519050620000a9816200010f565b92915050565b600060208284031215620000c257600080fd5b6000620000d28482850162000098565b91505092915050565b6000620000e882620000ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011a81620000db565b81146200012657600080fd5b50565b612dc380620001396000396000f3fe6080604052600436106101dc5760003560e01c80636bbf90a611610102578063c0c442d011610095578063ce8d98a711610064578063ce8d98a714610784578063d5cfb891146107c1578063d9c18755146107dd578063e23c4c27146108065761020c565b8063c0c442d0146106ad578063c3a5149c146106d6578063c5f89d5c146106ff578063c981c6f21461073c5761020c565b80639e86ee86116100d15780639e86ee86146105df578063a0e7772c1461061c578063adced8f014610645578063b225f1fe146106825761020c565b80636bbf90a6146104f45780638682af151461051d5780639076b4831461055a5780639c7a9a4d1461059c5761020c565b80633cb8fa2d1161017a578063634e661711610149578063634e661714610409578063673f97af146104465780636a2faa741461048e5780636b091695146104cb5761020c565b80633cb8fa2d146103485780634ef944e41461038557806350566375146103a157806358ca4844146103cc5761020c565b806316a8f941116101b657806316a8f9411461027c5780632046503d146102b957806327aa7032146102f6578063376d67e71461031f5761020c565b80630164e6111461020e5780630659ef02146102375780630a5ac53e146102605761020c565b3661020c57600034905060006101f133610831565b90508061020857600082111561020657610207565b5b5b5050005b005b34801561021a57600080fd5b5061023560048036038101906102309190612375565b610844565b005b34801561024357600080fd5b5061025e600480360381019061025991906122ba565b61084e565b005b61027a600480360381019061027591906120db565b610a31565b005b34801561028857600080fd5b506102a3600480360381019061029e91906120db565b610b8c565b6040516102b091906129e4565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906120db565b610bb7565b6040516102ed9190612717565b60405180910390f35b34801561030257600080fd5b5061031d600480360381019061031891906121ff565b610c02565b005b34801561032b57600080fd5b5061034660048036038101906103419190612321565b610e1b565b005b34801561035457600080fd5b5061036f600480360381019061036a91906120db565b610e59565b60405161037c91906129e4565b60405180910390f35b61039f600480360381019061039a9190612170565b610e94565b005b3480156103ad57600080fd5b506103b661119e565b6040516103c391906129e4565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee91906120db565b6111a8565b60405161040091906129e4565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b91906120db565b6111d3565b60405161043d91906129e4565b60405180910390f35b34801561045257600080fd5b5061046d600480360381019061046891906120db565b6111fe565b6040516104859c9b9a9998979695949392919061275b565b60405180910390f35b34801561049a57600080fd5b506104b560048036038101906104b091906120db565b6112dd565b6040516104c291906129e4565b60405180910390f35b3480156104d757600080fd5b506104f260048036038101906104ed9190612076565b61130b565b005b34801561050057600080fd5b5061051b600480360381019061051691906121ff565b61143d565b005b34801561052957600080fd5b50610544600480360381019061053f919061204d565b61156b565b60405161055191906129e4565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c919061204d565b611583565b604051610593969594939291906129ff565b60405180910390f35b3480156105a857600080fd5b506105c360048036038101906105be919061211c565b6115ec565b6040516105d69796959493929190612815565b60405180910390f35b3480156105eb57600080fd5b50610606600480360381019061060191906120db565b611696565b60405161061391906129e4565b60405180910390f35b34801561062857600080fd5b50610643600480360381019061063e91906120db565b6116be565b005b34801561065157600080fd5b5061066c600480360381019061066791906120db565b6116e6565b60405161067991906129e4565b60405180910390f35b34801561068e57600080fd5b50610697611721565b6040516106a49190612717565b60405180910390f35b3480156106b957600080fd5b506106d460048036038101906106cf91906120db565b611745565b005b3480156106e257600080fd5b506106fd60048036038101906106f89190612266565b6117f7565b005b34801561070b57600080fd5b50610726600480360381019061072191906120db565b611896565b6040516107339190612717565b60405180910390f35b34801561074857600080fd5b50610763600480360381019061075e91906120db565b6118e1565b60405161077b9c9b9a9998979695949392919061275b565b60405180910390f35b34801561079057600080fd5b506107ab60048036038101906107a691906120db565b61199e565b6040516107b891906129e4565b60405180910390f35b6107db60048036038101906107d691906120db565b6119c9565b005b3480156107e957600080fd5b5061080460048036038101906107ff91906120db565b611ca1565b005b34801561081257600080fd5b5061081b611d74565b60405161082891906129e4565b60405180910390f35b600080823b905060008111915050919050565b80600d8190555050565b6002808460405161085f9190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff16146108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b890612984565b60405180910390fd5b600015156108ce33610831565b151514610910576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610907906129a4565b60405180910390fd5b60006002846040516109229190612700565b9081526020016040518091039020600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828160020181905550818160030181905550826002856040516109959190612700565b908152602001604051809103902060070160008282546109b59190612ae8565b92505081905550816002856040516109cd9190612700565b908152602001604051809103902060080160008282546109ed9190612ae8565b92505081905550600284604051610a049190612700565b90815260200160405180910390206002016000815480929190610a2690612c44565b919050555050505050565b60001515610a3e33610831565b151514610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a77906129a4565b60405180910390fd5b60003411610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba90612884565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b09573d6000803e3d6000fd5b50610b3e34600283604051610b1e9190612700565b908152602001604051809103902060060154611d7a90919063ffffffff16565b600282604051610b4e9190612700565b90815260200160405180910390206006018190555034600282604051610b749190612700565b90815260200160405180910390206004018190555050565b6000600282604051610b9e9190612700565b9081526020016040518091039020600101549050919050565b6000600282604051610bc99190612700565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60001515610c0f33610831565b151514610c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c48906129a4565b60405180910390fd5b600a8111610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90612944565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30836040518363ffffffff1660e01b8152600401610ccf929190612732565b602060405180830381600087803b158015610ce957600080fd5b505af1158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2191906120b2565b50610d5681600285604051610d369190612700565b908152602001604051809103902060050154611d7a90919063ffffffff16565b600284604051610d669190612700565b90815260200160405180910390206005018190555033600284604051610d8c9190612700565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600284604051610ded9190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff160217905550505050565b80600283604051610e2c9190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff1602179055505050565b6000600282604051610e6b9190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff169050919050565b6001600286604051610ea69190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff1614610f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eff906128e4565b60405180910390fd5b60001515610f1533610831565b151514610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e906129a4565b60405180910390fd5b60018111610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f91906129c4565b60405180910390fd5b6000600286604051610fac9190612700565b9081526020016040518091039020600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060028660405161100c9190612700565b9081526020016040518091039020600b01339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30846040518363ffffffff1660e01b81526004016110b9929190612732565b602060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b91906120b2565b508381600001819055508281600101819055508181600401819055506002866040516111379190612700565b9081526020016040518091039020600101600081548092919061115990612c44565b91905055508160028760405161116f9190612700565b9081526020016040518091039020600501600082825461118f9190612ae8565b92505081905550505050505050565b6000600d54905090565b60006002826040516111ba9190612700565b9081526020016040518091039020600801549050919050565b60006002826040516111e59190612700565b9081526020016040518091039020600701549050919050565b600080600080600080600080600080600080600060028e6040516112229190612700565b908152602001604051809103902090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff168260000160159054906101000a900460ff16836001015484600201548560030160009054906101000a900460ff1686600401548760050154886006015489600701548a600801548b600901549c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b600e818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161138d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138490612904565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166386c3539e82600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401611407929190612732565b600060405180830381600087803b15801561142157600080fd5b505af1158015611435573d6000803e3d6000fd5b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30836040518363ffffffff1660e01b8152600401611478929190612732565b602060405180830381600087803b15801561149257600080fd5b505af11580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca91906120b2565b50336002846040516114dc9190612700565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160028460405161153d9190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff160217905550505050565b60046020528060005260406000206000915090505481565b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060050160009054906101000a900460ff16908060050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60008060008060008060008060028a6040516116089190612700565b9081526020016040518091039020600a0160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015481600101548260020154836003015484600401548560050154866006015497509750975097509750975097505092959891949750929550565b6000600e826040516116a89190612700565b9081526020016040518091039020549050919050565b610457600e826040516116d19190612700565b90815260200160405180910390208190555050565b60006002826040516116f89190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff169050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7385763ca7dd3b68efbd8a91c4b92532f86af197e260028260405161176a9190612700565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002826040516117cb9190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff16021790555050565b336002836040516118089190612700565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016002836040516118699190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff1602179055505050565b60006002826040516118a89190612700565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060000160159054906101000a900460ff16908060010154908060020154908060030160009054906101000a900460ff1690806004015490806005015490806006015490806007015490806008015490806009015490508c565b60006002826040516119b09190612700565b9081526020016040518091039020600501549050919050565b600015156119d633610831565b151514611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f906129a4565b60405180910390fd5b6004600282604051611a2a9190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff161415611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a84906128a4565b60405180910390fd5b600281604051611a9d9190612700565b9081526020016040518091039020600401543411611af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae7906129c4565b60405180910390fd5b6000600282604051611b029190612700565b90815260200160405180910390206004015414611b995734600282604051611b2a9190612700565b908152602001604051809103902060040181905550600281604051611b4f9190612700565b908152602001604051809103902060040154600282604051611b719190612700565b90815260200160405180910390206006016000828254611b919190612b6f565b925050819055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611bdf573d6000803e3d6000fd5b5034600282604051611bf19190612700565b90815260200160405180910390206004018190555034600282604051611c179190612700565b90815260200160405180910390206006016000828254611c379190612ae8565b9250508190555033600282604051611c4f9190612700565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60028082604051611cb29190612700565b908152602001604051809103902060030160009054906101000a900460ff1660ff161415611d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0c90612924565b60405180910390fd5b6003600282604051611d279190612700565b908152602001604051809103902060030160006101000a81548160ff021916908360ff160217905550611d5981611dd8565b60056000815480929190611d6c90612c44565b919050555050565b60015481565b6000808284611d899190612ae8565b905083811015611dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc5906128c4565b60405180910390fd5b8091505092915050565b6000600282604051611dea9190612700565b90815260200160405180910390206007015414158015611e2c57506000600282604051611e179190612700565b90815260200160405180910390206008015414155b611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290612964565b60405180910390fd5b6000600282604051611e7d9190612700565b908152602001604051809103902060020154600283604051611e9f9190612700565b908152602001604051809103902060070154611ebb9190612b3e565b90506000600283604051611ecf9190612700565b908152602001604051809103902060020154600284604051611ef19190612700565b908152602001604051809103902060080154611f0d9190612b3e565b90506000611f1a82611f22565b905050505050565b6000806000905060648311611f51576003601984611f409190612b3e565b611f4a9190612ae8565b9050611f73565b606483118015611f6357506102588311155b15611f6d57611f72565b600a90505b5b80915050919050565b6000611f8f611f8a84612a91565b612a60565b905082815260208101848484011115611fa757600080fd5b611fb2848285612c02565b509392505050565b600081359050611fc981612d1a565b92915050565b600081519050611fde81612d31565b92915050565b600081359050611ff381612d48565b92915050565b600082601f83011261200a57600080fd5b813561201a848260208601611f7c565b91505092915050565b60008135905061203281612d5f565b92915050565b60008135905061204781612d76565b92915050565b60006020828403121561205f57600080fd5b600061206d84828501611fba565b91505092915050565b6000806040838503121561208957600080fd5b600061209785828601611fba565b92505060206120a885828601611fba565b9150509250929050565b6000602082840312156120c457600080fd5b60006120d284828501611fcf565b91505092915050565b6000602082840312156120ed57600080fd5b600082013567ffffffffffffffff81111561210757600080fd5b61211384828501611ff9565b91505092915050565b6000806040838503121561212f57600080fd5b600083013567ffffffffffffffff81111561214957600080fd5b61215585828601611ff9565b925050602061216685828601611fba565b9150509250929050565b600080600080600060a0868803121561218857600080fd5b600086013567ffffffffffffffff8111156121a257600080fd5b6121ae88828901611ff9565b95505060206121bf88828901611fba565b94505060406121d088828901611fe4565b93505060606121e188828901611fe4565b92505060806121f288828901612023565b9150509295509295909350565b60008060006060848603121561221457600080fd5b600084013567ffffffffffffffff81111561222e57600080fd5b61223a86828701611ff9565b935050602061224b86828701611fba565b925050604061225c86828701612023565b9150509250925092565b6000806040838503121561227957600080fd5b600083013567ffffffffffffffff81111561229357600080fd5b61229f85828601611ff9565b92505060206122b085828601612023565b9150509250929050565b6000806000606084860312156122cf57600080fd5b600084013567ffffffffffffffff8111156122e957600080fd5b6122f586828701611ff9565b935050602061230686828701612023565b925050604061231786828701612023565b9150509250925092565b6000806040838503121561233457600080fd5b600083013567ffffffffffffffff81111561234e57600080fd5b61235a85828601611ff9565b925050602061236b85828601612038565b9150509250929050565b60006020828403121561238757600080fd5b600061239584828501612023565b91505092915050565b6123a781612ba3565b82525050565b6123b681612bb5565b82525050565b6123c581612bc1565b82525050565b60006123d682612ac1565b6123e08185612add565b93506123f0818560208601612c11565b80840191505092915050565b6000612409600e83612acc565b91507f45746820626f6e757320697320300000000000000000000000000000000000006000830152602082019050919050565b6000612449601783612acc565b91507f416374697669747920616c726561647920656e6465642e0000000000000000006000830152602082019050919050565b6000612489601b83612acc565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006124c9601883612acc565b91507f61637469766974792063616e206e6f74207061727420696e00000000000000006000830152602082019050919050565b6000612509602c83612acc565b91507f74686973206163636f756e7420686173206e6f742072657761726420696e207460008301527f68697320616374697669747900000000000000000000000000000000000000006020830152604082019050919050565b600061256f601f83612acc565b91507f4576616c756174652073746174652068617320616c726561647920656e642e006000830152602082019050919050565b60006125af601d83612acc565b91507f43726561746520636f6e74726163742066656520697320656e6f7567680000006000830152602082019050919050565b60006125ef600e83612acc565b91507f746f74616c53636f7265206572720000000000000000000000000000000000006000830152602082019050919050565b600061262f601f83612acc565b91507f6163746976697479206973206e6f7420696e2072657665616c207374617465006000830152602082019050919050565b600061266f601183612acc565b91507f4e6f742061206e6f726d616c20757365720000000000000000000000000000006000830152602082019050919050565b60006126af601283612acc565b91507f796f757220626f6e7573206973206c65737300000000000000000000000000006000830152602082019050919050565b6126eb81612beb565b82525050565b6126fa81612bf5565b82525050565b600061270c82846123cb565b915081905092915050565b600060208201905061272c600083018461239e565b92915050565b6000604082019050612747600083018561239e565b61275460208301846126e2565b9392505050565b600061018082019050612771600083018f61239e565b61277e602083018e6126f1565b61278b604083018d6126f1565b612798606083018c6126e2565b6127a5608083018b6126e2565b6127b260a083018a6126f1565b6127bf60c08301896126e2565b6127cc60e08301886126e2565b6127da6101008301876126e2565b6127e86101208301866126e2565b6127f66101408301856126e2565b6128046101608301846126e2565b9d9c50505050505050505050505050565b600060e08201905061282a600083018a6123bc565b61283760208301896123bc565b61284460408301886126e2565b61285160608301876126e2565b61285e60808301866126e2565b61286b60a08301856126e2565b61287860c08301846126e2565b98975050505050505050565b6000602082019050818103600083015261289d816123fc565b9050919050565b600060208201905081810360008301526128bd8161243c565b9050919050565b600060208201905081810360008301526128dd8161247c565b9050919050565b600060208201905081810360008301526128fd816124bc565b9050919050565b6000602082019050818103600083015261291d816124fc565b9050919050565b6000602082019050818103600083015261293d81612562565b9050919050565b6000602082019050818103600083015261295d816125a2565b9050919050565b6000602082019050818103600083015261297d816125e2565b9050919050565b6000602082019050818103600083015261299d81612622565b9050919050565b600060208201905081810360008301526129bd81612662565b9050919050565b600060208201905081810360008301526129dd816126a2565b9050919050565b60006020820190506129f960008301846126e2565b92915050565b600060c082019050612a1460008301896126e2565b612a2160208301886126e2565b612a2e60408301876126e2565b612a3b60608301866126e2565b612a4860808301856123ad565b612a5560a083018461239e565b979650505050505050565b6000604051905081810181811067ffffffffffffffff82111715612a8757612a86612ceb565b5b8060405250919050565b600067ffffffffffffffff821115612aac57612aab612ceb565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000612af382612beb565b9150612afe83612beb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b3357612b32612c8d565b5b828201905092915050565b6000612b4982612beb565b9150612b5483612beb565b925082612b6457612b63612cbc565b5b828204905092915050565b6000612b7a82612beb565b9150612b8583612beb565b925082821015612b9857612b97612c8d565b5b828203905092915050565b6000612bae82612bcb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612c2f578082015181840152602081019050612c14565b83811115612c3e576000848401525b50505050565b6000612c4f82612beb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c8257612c81612c8d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d2381612ba3565b8114612d2e57600080fd5b50565b612d3a81612bb5565b8114612d4557600080fd5b50565b612d5181612bc1565b8114612d5c57600080fd5b50565b612d6881612beb565b8114612d7357600080fd5b50565b612d7f81612bf5565b8114612d8a57600080fd5b5056fea26469706673582212205c0db936de56af5881baf5c132f75b189235142ec11f699d42fb5d5fe862f7e464736f6c63430008000033";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected PubComentsChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PubComentsChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<PubComentsChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _techAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_techAddr)));
        return deployRemoteCall(PubComentsChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<PubComentsChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _techAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_techAddr)));
        return deployRemoteCall(PubComentsChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> FilmActivityTest(String param0) {
        final Function function = new Function(
                "FilmActivityTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> FilmEvaActivity(String param0) {
        final Function function = new Function(
                "FilmEvaActivity", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> participantMap(String param0) {
        final Function function = new Function(
                "participantMap", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> participantOwnerTokenMap(String param0) {
        final Function function = new Function(
                "participantOwnerTokenMap", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> techAddr() {
        final Function function = new Function(
                "techAddr", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> totalTechAmount() {
        final Function function = new Function(
                "totalTechAmount", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createEvaActivityWithToken(String filmId, String _tokenAddr, BigInteger value) {
        final Function function = new Function(
                "createEvaActivityWithToken", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createEvaActivityBonusEth(String filmId,BigInteger weiValue) {
        final Function function = new Function(
                "createEvaActivityBonusEth", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,weiValue);
    }

    public RemoteCall<TransactionReceipt> setActivityState(String filmId, BigInteger activityState) {
        final Function function = new Function(
                "setActivityState", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.generated.Uint8(activityState)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sponsorFight(String filmId) {
        final Function function = new Function(
                "sponsorFight", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> participateActivityWithBlind(String filmId, String _tokenAddr, byte[] _hashScore, byte[] _hashBoxOffice, BigInteger feeValue) {
        final Function function = new Function(
                "participateActivityWithBlind", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.generated.Bytes32(_hashScore), 
                new org.web3j.abi.datatypes.generated.Bytes32(_hashBoxOffice), 
                new org.web3j.abi.datatypes.generated.Uint256(feeValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> participateActivityWithReveal(String filmId, BigInteger score, BigInteger forecastBoxOffice) {
        final Function function = new Function(
                "participateActivityWithReveal", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.generated.Uint256(score), 
                new org.web3j.abi.datatypes.generated.Uint256(forecastBoxOffice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> EvaActivityEnd(String filmId) {
        final Function function = new Function(
                "EvaActivityEnd", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getReward(String _tokenAddr, String to) {
        final Function function = new Function(
                "getReward", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddr), 
                new org.web3j.abi.datatypes.Address(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getParticipantNum(String filmId) {
        final Function function = new Function(
                "getParticipantNum", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function,BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> getTokenPoll(String filmId) {
        final Function function = new Function(
                "getTokenPoll", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getSponor(String filmId) {
        final Function function = new Function(
                "getSponor", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function,String.class);
    }

    public RemoteCall<BigInteger> getActivityState(String filmId) {
        final Function function = new Function(
                "getActivityState", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function,BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> getTotalScore(String filmId) {
        final Function function = new Function(
                "getTotalScore", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTotalBoxOffice(String filmId) {
        final Function function = new Function(
                "getTotalBoxOffice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

//    public RemoteCall<TransactionReceipt> getEvaActivityData(String filmId) {
//        final Function function = new Function(
//                "getEvaActivityData",
//                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeRemoteCallTransaction(function);
//    }


    public RemoteCall<Tuple11<String,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger>>getEvaActivityData(String filmId) {
        final Function function = new Function(
                "getEvaActivityData",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {},new TypeReference<Uint256>() {}));

        return new RemoteCall<Tuple11<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger,BigInteger>>(
                new Callable<Tuple11<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger,BigInteger>>() {
                    @Override
                    public Tuple11<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger,BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger,BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (BigInteger) results.get(9).getValue());
                    }
                });

    }


    public RemoteCall<TransactionReceipt> getParticipantActivityData(String filmId, String acount) {
        final Function function = new Function(
                "getParticipantActivityData", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.Address(acount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTestNum(BigInteger testNum) {
        final Function function = new Function(
                "setTestNum", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(testNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getTestNum() {
        final Function function = new Function(
                "getTestNum", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTest(String filmId) {
        final Function function = new Function(
                "createTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTest01(String filmId, String tokenAddr, BigInteger value) {
        final Function function = new Function(
                "createTest01", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.Address(tokenAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTest02(String filmId, BigInteger value) {
        final Function function = new Function(
                "createTest02", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getSponorTest(String filmId) {
        final Function function = new Function(
                "getSponorTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getActivityStateTest(String filmId) {
        final Function function = new Function(
                "getActivityStateTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function,BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setFilmActivityTest(String filmId) {
        final Function function = new Function(
                "setFilmActivityTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getFilmActivityTest(String filmId) {
        final Function function = new Function(
                "getFilmActivityTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(filmId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static PubComentsChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PubComentsChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static PubComentsChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PubComentsChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
